name: PR Analysis with Copilot Detection

"on":
  schedule:
    # Run every Monday at 9:00 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      output_format:
        description: 'Output format (json or csv)'
        required: false
        default: 'json'
        type: choice
        options:
          - json
          - csv
      clean_cache:
        description: 'Clean the cache and start fresh'
        required: false
        default: false
        type: boolean
  push:
    paths:
      - .github/workflows/pr-analysis.yml
      - "src/*"
      - "tests/*"
      - package.json
      - package-lock.json
      
jobs:
  analyze-prs:
    name: Analyze Pull Requests and Copilot Collaboration
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      pull-requests: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      
      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
      
      - name: Cache HTTP requests
        uses: actions/cache@v4
        with:
          path: .http_cache
          key: http-cache-${{ hashFiles('package-lock.json') }}-${{ github.run_number }}
          restore-keys: |
            http-cache-${{ hashFiles('package-lock.json') }}-
            http-cache-
      
      - name: Clean cache directory
        if: github.event.inputs.clean_cache == 'true'
        run: |
          echo "Cache cleaning option selected. Removing existing cache directory..."
          rm -rf .http_cache
          echo "Cache directory cleaned. A fresh cache will be created during analysis."
      
      - name: Validate GitHub token
        run: |
          echo "Validating GitHub token permissions..."
          
          # Get response with status code
          RESPONSE=$(curl -s -w "\n%{http_code}" -H "Authorization: token ${{ secrets.GH_PAT }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user)
          
          # Extract status code (last line) and body (everything except last line)
          STATUS_CODE=$(echo "$RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$STATUS_CODE" = "200" ] && echo "$RESPONSE_BODY" | grep -q "login"; then
            echo "‚úì Token is valid and can authenticate"
            echo "Token scopes: $(curl -s -I -H "Authorization: token ${{ secrets.GH_PAT }}" \
              https://api.github.com/user | grep x-oauth-scopes)"
          else
            echo "‚úó Token validation failed"
            echo "HTTP Status Code: [$STATUS_CODE]"
            echo "Response Body: [$RESPONSE_BODY]"
            
            # Get and show headers for additional context (rate limits, etc.)
            echo "Getting response headers for additional context..."
            HEADERS=$(curl -s -I -H "Authorization: token ${{ secrets.GH_PAT }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/user)
            
            # Show rate limit headers if present
            if echo "$HEADERS" | grep -i "x-ratelimit" > /dev/null; then
              echo "Rate limit information:"
              echo "$HEADERS" | grep -i "x-ratelimit"
            fi
            
            # Show retry-after header if present
            if echo "$HEADERS" | grep -i "retry-after" > /dev/null; then
              echo "Retry information:"
              echo "$HEADERS" | grep -i "retry-after"
            fi
            
            # Provide actionable guidance based on status code
            case "$STATUS_CODE" in
              401)
                echo "‚ùå Error: Unauthorized - Token may be invalid or expired"
                echo "üí° Action: Check that the GH_PAT secret is set correctly and the token is valid"
                echo "Required PAT scopes: repo, user"
                ;;
              403)
                echo "‚ùå Error: Forbidden - Token may lack required permissions"
                echo "üí° Action: Ensure the token has 'repo' and 'user' scopes"
                echo "Required PAT scopes: repo, user"
                ;;
              429)
                echo "‚ùå Error: Rate limited"
                echo "üí° Action: Wait for rate limit to reset or check if too many requests are being made"
                ;;
              *)
                echo "‚ùå Error: Unexpected status code [$STATUS_CODE]"
                echo "üí° Action: Check GitHub API status and token validity"
                ;;
            esac
            
            exit 1
          fi

      - name: Run PR analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          OUTPUT_FORMAT: ${{ github.event.inputs.output_format || 'json' }}
          ANALYZE_ALL_REPOS: 'true'
          CLEAN_CACHE: ${{ github.event.inputs.clean_cache || 'false' }}
        run: |
          npm run analyze
      
      - name: Generate Mermaid Charts
        if: env.OUTPUT_FORMAT == 'json' || github.event.inputs.output_format != 'csv'
        run: |
          npm run charts
      
      - name: Upload analysis results
        uses: actions/upload-artifact@v5
        with:
          name: pr-analysis-results
          path: pr_analysis_*.json
          retention-days: 30
      
      - name: Upload CSV results (if generated)
        uses: actions/upload-artifact@v5
        if: env.OUTPUT_FORMAT == 'csv' || github.event.inputs.output_format == 'csv'
        with:
          name: pr-analysis-results-csv
          path: pr_analysis_*.csv
          retention-days: 30
